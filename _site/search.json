[
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "",
    "text": "For my project, we will be exploring the distribution of healthcare facilities in Cambodia. My team consists of ViddyaSri and I, and I will be focusing on the exploratory data analysis portion of the project.\nIn this take home exercise, I will be writing down all the codes needed to derive the maps to be plotted in the final Shiny application. I will also be attaching the UI prototype."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#overview-of-data-used",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#overview-of-data-used",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Overview of data used",
    "text": "Overview of data used\n\nBoundary data\nWe have different levels of the boundary data.\n\n\n\n\n\n\n\n\nName\nDescription\nType\n\n\n\n\nKHM_adm1\nThis data shows the entirety of Cambodia, split by provinces.\nshp\n\n\nKHM_adm2\nThis data shows the entirety of Cambodia, split by districts.\nshp\n\n\nKHM_adm3\nThis data shows the entirety of Cambodia, split by communes.\nshp\n\n\nKHM_adm4\nThis data shows the entirety of Cambodia, split by villages.\nshp\n\n\n\n\n\nHealthcare data\nWe have different levels of the boundary data.\n\n\n\n\n\n\n\n\nName\nDescription\nType\n\n\n\n\nHealth center\nThis data shows the distribution of health center facilities across Cambodia.\nshp\n\n\nHealth post\nThis data shows the distribution of health post facilities across Cambodia.\nshp\n\n\nNational hospital\nThis data shows the distribution of national hospital facilities across Cambodia.\nshp\n\n\nReferral Hospital\nThis data shows the distribution of referral hospital facilities across Cambodia.\nshp\n\n\n\n\n\nRoads\n\n\n\nName\nDescription\nType\n\n\n\n\nRoads\nThis shows the various roads around Cambodia.\ngpkg"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#boundary-data-1",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#boundary-data-1",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Boundary Data",
    "text": "Boundary Data\nLet’s import the data now.\n\nImporting boundary data\n\nProvince LayerDistrict LayerCommune LayerVillage Layer\n\n\n\nprovince_sf &lt;- st_read(dsn = \"data/boundary/level1\", \n                layer = \"KHM_adm1\")\n\nReading layer `KHM_adm1' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\boundary\\level1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 25 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.3355 ymin: 9.91361 xmax: 107.63 ymax: 14.68817\nGeodetic CRS:  WGS 84\n\n\n\n\n\ndistrict_sf &lt;- st_read(dsn = \"data/boundary/level2\", \n                layer = \"KHM_adm2\")\n\nReading layer `KHM_adm2' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\boundary\\level2' \n  using driver `ESRI Shapefile'\nSimple feature collection with 178 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.3355 ymin: 9.91361 xmax: 107.63 ymax: 14.68817\nGeodetic CRS:  WGS 84\n\n\n\n\n\ncommune_sf &lt;- st_read(dsn = \"data/boundary/level3\", \n                layer = \"KHM_adm3\")\n\nReading layer `KHM_adm3' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\boundary\\level3' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1576 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.3355 ymin: 9.91361 xmax: 107.63 ymax: 14.68817\nGeodetic CRS:  WGS 84\n\n\n\n\n\nvillage_sf &lt;- st_read(dsn = \"data/boundary/level4\", \n                layer = \"KHM_adm4\")\n\nReading layer `KHM_adm4' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\boundary\\level4' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1580 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 102.3355 ymin: 9.91361 xmax: 107.63 ymax: 14.68817\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nHandle Invalid Geometry\n\nProvinceDistrictCommuneVillage\n\n\n\nlength(which(st_is_valid(province_sf) == FALSE))\n\n[1] 0\n\n\nThere are no invalid geometries!\n\n\n\nlength(which(st_is_valid(district_sf) == FALSE))\n\n[1] 0\n\n\nThere are no invalid geometries.\n\n\n\nlength(which(st_is_valid(commune_sf) == FALSE))\n\n[1] 0\n\n\n\n\n\nlength(which(st_is_valid(village_sf) == FALSE))\n\n[1] 0\n\n\n\n\n\nLuckily we have no invalid geometries for the boundary layer.\n\n\nProjection of Data\n\nProvince LayerDistrict LayerCommune LayerVillage Layer\n\n\n\nprovince_sf &lt;- st_transform(province_sf, 32648)\nst_crs(province_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\n\n\n\ndistrict_sf &lt;- st_transform(district_sf, 32648)\nst_crs(district_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\n\n\n\ncommune_sf &lt;- st_transform(commune_sf, 32648)\nst_crs(commune_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\n\n\n\nvillage_sf &lt;- st_transform(village_sf, 32648)\nst_crs(village_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\n\n\n\n\n\nPlotting Of Data\nLet’s plot the data!\n\nProvinceDistrictCommuneVillage\n\n\n\ntmap_mode('plot')\ntm_shape(province_sf) + \n  tm_polygons(col = \"#F0E1D7\", alpha = 0.5)\n\n\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(district_sf) + \n  tm_polygons(col = \"#F0E1D7\", alpha = 0.5)\n\n\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(commune_sf) + \n  tm_polygons(col = \"#F0E1D7\", alpha = 0.5)\n\n\n\n\n\n\n\ntmap_mode('plot')\ntm_shape(village_sf) + \n  tm_polygons(col = \"#F0E1D7\", alpha = 0.5)\n\n\n\n\n\n\n\n\n\nCreating Cambodia boundary\n\ncambodia_sf &lt;- province_sf %&gt;%\n  st_union() \n\n\nplot(cambodia_sf, main = \"Cambodia Boundary Layer\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#healthcare-data-1",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#healthcare-data-1",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Healthcare Data",
    "text": "Healthcare Data\n\nImporting healthcare data\n\nhealthposthealthcenternational hospitalreferral hospital\n\n\n\npoints_healthpost &lt;- st_read(dsn = \"data/healthpost\", \n                layer = \"healthpost\")\n\nReading layer `healthpost' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\healthpost' \n  using driver `ESRI Shapefile'\nSimple feature collection with 89 features and 12 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 247772 ymin: 1190286 xmax: 762122.8 ymax: 1591629\nProjected CRS: WGS 84 / UTM zone 48N\n\n\n\n\n\npoints_healthcenter &lt;- st_read(dsn = \"data/healthcenter\", \n                layer = \"healthcenter\")\n\nReading layer `healthcenter' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\healthcenter' \n  using driver `ESRI Shapefile'\nSimple feature collection with 956 features and 13 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 213103.9 ymin: 1155396 xmax: 764437 ymax: 1594142\nProjected CRS: WGS 84 / UTM zone 48N\n\n\n\n\n\npoints_nationalhospital &lt;- st_read(dsn = \"data/nationalhospital\", \n                layer = \"national_hospital_en\")\n\nReading layer `national_hospital_en' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\nationalhospital' \n  using driver `ESRI Shapefile'\nSimple feature collection with 9 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 376678.3 ymin: 1276217 xmax: 491651.7 ymax: 1478968\nProjected CRS: WGS 84 / UTM zone 48N\n\n\n\n\n\npoints_referralhospital &lt;- st_read(dsn = \"data/referralhospital\", \n                layer = \"hltfacp_referral\")\n\nReading layer `hltfacp_referral' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\referralhospital' \n  using driver `ESRI Shapefile'\nSimple feature collection with 76 features and 12 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 216012.9 ymin: 1158852 xmax: 737796 ymax: 1573927\nProjected CRS: WGS 84 / UTM zone 48N\n\n\n\n\n\n\n\nData preperation\nHere we attach a column called category to each data table, and categorise it. We do this so that when we combine the data into one data variable, we will know what the category of each hospital facility is.\n\npoints_healthcenter &lt;- points_healthcenter %&gt;% mutate(CATEGORY = \"Health Center\")\npoints_healthpost &lt;- points_healthpost %&gt;% mutate(CATEGORY = \"Health Post\")\npoints_referralhospital &lt;- points_referralhospital %&gt;% mutate(CATEGORY = \"Referral Hospital\")\npoints_nationalhospital &lt;- points_nationalhospital %&gt;% mutate(CATEGORY = \"National Hospital\")\n\nLet’s remove the COVERNAME column as there are NAs in the column.\n\npoints_healthcenter &lt;- subset(points_healthcenter, select = -COVERNAME)\n\nLet’s make all he column names uppercase\n\nst_geometry(points_nationalhospital) &lt;- \"geometry\"\n\n# Get the names of all columns except the geometry column\ncolumn_names &lt;- names(points_nationalhospital)[!grepl(\"^geometry$\", names(points_nationalhospital))]\n\n# Convert column names to uppercase\ncolumn_names_upper &lt;- toupper(column_names)\n\n# Replace column names in the sf object\nnames(points_nationalhospital)[!grepl(\"^geometry$\", names(points_nationalhospital))] &lt;- column_names_upper\n\n\n# Drop columns \"BUILDING\", \"STREET\", \"WEB\", \"REFERENCE\", \"LAT\", \"LONG\", and \"LANGUAGE\"\npoints_nationalhospital &lt;- subset(points_nationalhospital, select = -c(BUILDING, STREET, WEB, REFERENCE, LAT, LONG, LANGUAGE))\n\npoints_nationalhospital$DCODE &lt;- NA\npoints_nationalhospital$CCODE &lt;- NA\npoints_nationalhospital$VCODE &lt;- NA\npoints_nationalhospital$ODCODE &lt;- NA\npoints_nationalhospital$ODNAME &lt;- NA\n\n# Rearrange the columns\npoints_nationalhospital &lt;- points_nationalhospital[, c(\"PCODE\", \"PNAME\", \"DCODE\", \"DNAME\", \"CCODE\", \"CNAME\", \"VCODE\", \"VNAME\", \"ODCODE\", \"ODNAME\", \"FACILITCOD\", \"FACILITNAM\", \"CATEGORY\", \"geometry\")]\n\n\npoints_facilities &lt;- rbind(points_healthcenter, points_healthpost, points_referralhospital, points_nationalhospital)\n\n\npoints_facilities$PNAME &lt;- gsub(\"Banteay Mean Chey\", \"Banteay Meanchey\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Battambang\", \"Batdambang\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Battam Bang\", \"Batdambang\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Kampong Speu\", \"Kampong Spoe\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Kampong Spueu\", \"Kampong Spoe\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Kampong Thom\", \"Kampong Thum\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Koh Kong\", \"Kaoh Kong\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Kratie\", \"Kracheh\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Pailin\", \"Krong Pailin\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Sihanoukville\", \"Krong Preah Sihanouk\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Sihaknouk Vill\", \"Krong Preah Sihanouk\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Mondul Kiri\", \"Mondol Kiri\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Oddor Meanchey\", \"Otdar Mean Chey\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Oddar Mean chey\", \"Otdar Mean Chey\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Oddar Meanchey\", \"Otdar Mean Chey\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Pursat\", \"Pouthisat\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Ratanak Kiri\", \"Rotanokiri\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Siemreap\", \"Siemreab\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Siem Reap\", \"Siemreab\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Stung  Treng\", \"Stoeng Treng\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Stung Treng\", \"Stoeng Treng\", points_facilities$PNAME)\npoints_facilities$PNAME &lt;- gsub(\"Takeo\", \"Takev\", points_facilities$PNAME)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#road-data",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#road-data",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Road Data",
    "text": "Road Data\n\nImporting Road Data\n\ncam_road_sf &lt;- st_read(\"data/roads/osm_road_2022_1641440547.gpkg\")\n\nReading layer `osm_road_2022_1641440547' from data source \n  `C:\\shaysnutss\\IS1455-GAA\\Take-Home_Ex\\Take-Home_Ex03\\data\\roads\\osm_road_2022_1641440547.gpkg' \n  using driver `GPKG'\nSimple feature collection with 169682 features and 15 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 102.3415 ymin: 10.42264 xmax: 107.6128 ymax: 14.69023\nGeodetic CRS:  WGS 84\n\n\n\n\nHandle Invalid Geometry\n\nlength(which(st_is_valid(cam_road_sf) == FALSE))\n\n[1] 0\n\n\n\n\nProjection\n\ncam_road_sf &lt;- st_transform(cam_road_sf, 32648)\nst_crs(cam_road_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32648 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 48N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 48N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",105,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\"],\n        BBOX[0,102,84,108]],\n    ID[\"EPSG\",32648]]\n\n\nPlot Road Network on Boundary Layer:\n\ntmap_mode('plot')\ntm_shape(cambodia_sf) + \n  tm_polygons(col = \"#F0E1D7\", alpha = 0.5) + \n  tm_shape(cam_road_sf) +\n  tm_lines(lwd = 0.05, col = \"#2B2B2B\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#total-number-of-healthcare-facilities-in-cambodia",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#total-number-of-healthcare-facilities-in-cambodia",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Total number of healthcare facilities in Cambodia",
    "text": "Total number of healthcare facilities in Cambodia\n1130"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#facility-type-breakdown",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#facility-type-breakdown",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Facility type breakdown",
    "text": "Facility type breakdown\n\n\n\n\n\n\n\n\n\nHealth centers\nHealth posts\nNational Hospital\nReferral Hospitals\n\n\n965\n89\n9\n76"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#cambodias-region-breakdown",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#cambodias-region-breakdown",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Cambodia’s region breakdown",
    "text": "Cambodia’s region breakdown\n\n\n\nProvinces\nDistricts\nCommunes\nVillages\n\n\n\n\n25\n178\n1576\n1580"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#breakdown-of-regions-with-highest-number-of-facilities",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#breakdown-of-regions-with-highest-number-of-facilities",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Breakdown of regions with highest number of facilities",
    "text": "Breakdown of regions with highest number of facilities\nThis code finds out which village, district, province and commune each health facility is part of.\n\n\n\n\n\n\nNote\n\n\n\nIn this code below, we go through each of hospital facilities in points_facilities and categorise them to the province, district, commune and village they belong to. There are some villages that do not have their own identifiable name, though they are distinct places with their own geometry column. Through our research we have realised that, ID_4 in village_sf is a distinct primary key column identifying each village. Hence, we will be replacing the villages with no names, with their distinct ID_4 values\n\n\n\n# Load necessary library\nlibrary(sf)\n\n\n# Create a subset of the first 5 rows for points_facilities\npoints_facilities_2 &lt;- points_facilities\n\n# Add new columns for administrative area names\npoints_facilities_2$province_name &lt;- NA\npoints_facilities_2$district_name &lt;- NA\npoints_facilities_2$commune_name &lt;- NA\npoints_facilities_2$village_name &lt;- NA\n\n# Iterate over each row in points_facilities_2\nfor (i in 1:nrow(points_facilities_2)) {\n  # Extract the current point\n  current_point &lt;- points_facilities_2[i, ]\n  \n  # Perform spatial join to find the village polygon that contains the current point\n  matched_village &lt;- village_sf[st_within(current_point, village_sf, sparse = FALSE), ]\n  \n  # Check if a match was found\n  if (nrow(matched_village) &gt; 0) {\n    # If a match was found, update the administrative area names for the current point\n    points_facilities_2$province_name[i] &lt;- matched_village$NAME_1[1]\n    points_facilities_2$district_name[i] &lt;- matched_village$NAME_2[1]\n    points_facilities_2$commune_name[i] &lt;- matched_village$NAME_3[1]\n    \n    # Check if the village name (NAME_4) is NA; if so, use ID_4 instead\n    if (is.na(matched_village$NAME_4[1])) {\n      points_facilities_2$village_name[i] &lt;- matched_village$ID_4[1]\n    } else {\n      points_facilities_2$village_name[i] &lt;- matched_village$NAME_4[1]\n    }\n  }\n}\n\n# Display the updated points_facilities_2\nprint(points_facilities_2)\n\nI’ll be writing this RDS so we don’t do the lengthy operation above.\n\n#write_rds(points_facilities_2, \"data/rds/points_facilities_2.rds\")\n\n\npoints_facilities_2 &lt;- read_rds(\"data/rds/points_facilities_2.rds\")\n\n\nTop 10 provinces with the most number of health facilities\n\n\n\n\n\n\nNote\n\n\n\nHere, we will be using the point_facilities_2 that we created earlier. It has the village, district, commune and province of each health facilitiy. Hence, when we group by province, we will get the health facilities of each province. Plotting them will give us an idea of the provinces that are the most medically advanced.\n\n\n\n# Load the dplyr package\nlibrary(dplyr)\n\n# Assuming points_facilities_2 is your dataset\n# Group by province_name, count the number of facilities, and arrange in descending order\nprovince_facility_count &lt;- points_facilities_2 %&gt;%\n  group_by(province_name) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count))\n\n# Select the top 10 provinces\ntop_10_provinces &lt;- head(province_facility_count, 10)\n\n# Adjusted bar plot with counts beside bars, with refined zoom and spacing\nggplot(top_10_provinces, aes(x = reorder(province_name, -count), y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(aes(label = count), hjust = -0.1, size = 3.5) + # Place text beside bars\n  theme_minimal() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\")) + \n  labs(title = \"Top 10 Provinces by Number of Health Facilities\",\n       x = \"Province\",\n       y = \"Number of Facilities\") +\n  coord_flip() # Keep the plot horizontal\n\n\n\n\n\n\nTop 10 districts with the most number of health facilities\nWe do the same here as above, but group by district.\n\n# Assuming points_facilities_2 is your dataset\n# Group by district_name, count the number of facilities, and arrange in descending order\ndistrict_facility_count &lt;- points_facilities_2 %&gt;%\n  group_by(district_name) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count))\n\n# Select the top 10 provinces\ntop_10_district &lt;- head(district_facility_count, 10)\n\n# Adjusted bar plot with counts beside bars, with refined zoom and spacing\nggplot(top_10_district, aes(x = reorder(district_name, -count), y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(aes(label = count), hjust = -0.1, size = 3.5) + # Place text beside bars\n  theme_minimal() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\")) +\n  labs(title = \"Top 10 Districts by Number of Health Facilities\",\n       x = \"District\",\n       y = \"Number of Facilities\") +\n  coord_flip() # Keep the plot horizontal\n\n\n\n\n\n\nTop 10 communes with the most number of health facilities\nWe do the same here as above, but group by commune.\n\n# Assuming points_facilities_2 is your dataset\n# Group by commune_name, count the number of facilities, and arrange in descending order\ncommune_facility_count &lt;- points_facilities_2 %&gt;%\n  group_by(commune_name) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count))\n\n# Select the top 10 provinces\ntop_10_commune &lt;- head(commune_facility_count, 10)\n\n# Adjusted bar plot with counts beside bars, with refined zoom and spacing\nggplot(top_10_commune, aes(x = reorder(commune_name, -count), y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(aes(label = count), hjust = -0.1, size = 3.5) + # Place text beside bars\n  theme_minimal() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\")) + # Slightly adjust plot margins if necessary\n  labs(title = \"Top 10 Communes by Number of Health Facilities\",\n       x = \"Communes\",\n       y = \"Number of Facilities\") +\n  coord_flip() # Keep the plot horizontal\n\n\n\n\n\n\nTop 10 villages with the most number of health facilities\nWe do the same here as above, but group by villages.\n\n# Assuming points_facilities_2 is your dataset\n# Group by village_name, count the number of facilities, and arrange in descending order\nvillage_facility_count &lt;- points_facilities_2 %&gt;%\n  group_by(village_name) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count))\n\n# Select the top 10 provinces\ntop_10_village &lt;- head(village_facility_count, 10)\n\n# Adjusted bar plot with counts beside bars, with refined zoom and spacing\nggplot(top_10_village, aes(x = reorder(village_name, -count), y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  geom_text(aes(label = count), hjust = -0.1, size = 3.5) + # Place text beside bars\n  theme_minimal() +\n  theme(plot.margin = unit(c(1, 1, 1, 1), \"cm\")) + # Slightly adjust plot margins if necessary\n  labs(title = \"Top 10 villages by Number of Health Facilities\",\n       x = \"Communes\",\n       y = \"Number of Facilities\") +\n  coord_flip() # Keep the plot horizontal"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-cambodia-map-divided-by-provinces",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-cambodia-map-divided-by-provinces",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Plotting facilities on cambodia map (divided by provinces)",
    "text": "Plotting facilities on cambodia map (divided by provinces)\nThis is what the uses will first see when they have not selected any option. They will get to see the distribution of health care facilities discretely and on a choropleth map against Cambodia divided as provinces.\n\nPlotting map with discrete facilitiesPlotting choropleth map\n\n\n\ntm_shape(province_sf, , scale = 5) +\n  tm_polygons(col = \"black\", border.col = \"white\") +\ntm_shape(points_facilities_2) +\n  tm_dots(size = 0.01, col = \"purple\")\n\n\n\n\n\n\nHere, we will be using points_facilities_2 to group by provinces and find the number healthcare facilities by province.\n\nlibrary(dplyr)\nlibrary(sf)\n\n\n# Process facilities_count_per_province\nfacilities_count_per_province &lt;- points_facilities_2 %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove geometry if it's an sf object\n  filter(!is.na(province_name)) %&gt;%  # Filter out rows with NA in province_name\n  group_by(province_name) %&gt;%\n  summarise(count = n(), .groups = 'drop')  # Summarise and drop grouping\n\n# Ensure sf package's select method is used for the sf object\nprovince_sf_selected &lt;- dplyr::select(province_sf, NAME_1, geometry)\n\n# Join with province_sf to add geometries\nfacilities_count_per_province &lt;- facilities_count_per_province %&gt;%\n  left_join(province_sf_selected, by = c(\"province_name\" = \"NAME_1\")) \n\n# Convert the result back to an sf object\nfacilities_count_per_province &lt;- st_as_sf(facilities_count_per_province)\n\n\ntm_shape(facilities_count_per_province)+\n  tm_fill(\"count\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Healthcaren facilities in Cambodia\",\n            main.title.position = \"center\",\n            main.title.size = 0.9,\n            legend.height = 0.3, \n            legend.width = 0.30,\n            legend.position = c(\"right\", \"bottom\"), \n            legend.title.size = 0.8,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nPlotting bar chart for categories of facilities in Cambodia\n\nfacilities_count_per_category &lt;- points_facilities_2 %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove geometry if  with NA in category\n  group_by(CATEGORY) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\nggplot(facilities_count_per_category, aes(x = CATEGORY, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Facilities Count per Category In Cambodia\", x = \"Category\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-a-province-divided-by-districts",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-a-province-divided-by-districts",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Plotting facilities on a province (divided by districts)",
    "text": "Plotting facilities on a province (divided by districts)\nLet’s get the geometry of the province selected by the user from province_sf.\n\nprovinceNameSelected &lt;- \"Batdâmbâng\"\nselected_row &lt;- subset(district_sf, NAME_1 == provinceNameSelected)\n\n# Select all health facilities that match the selected province name\nselectedHealthFacilities &lt;- subset(points_facilities_2, province_name == provinceNameSelected)\n\n\nMapping discrete healthcare facilities on a mapChoropleth\n\n\n\ntm_shape(selected_row, scale = 5) +\n  tm_polygons(col = \"black\", border.col = \"white\") +\ntm_shape(selectedHealthFacilities) +\n  tm_dots(size = 0.1, col = \"purple\")\n\n\n\n\n\n\nHere we find the healthcare facilities in each district of the selected province.\n\n# Adjusting the placeholder 'x' to the actual province name user is interested in\nprovince_of_interest &lt;- provinceNameSelected\n\n# Process facilities_count_per_district by filtering, grouping, and summarising\nfacilities_count_per_district &lt;- points_facilities_2 %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove geometry if it's an sf object\n  filter(!is.na(province_name) & !is.na(district_name)) %&gt;%  # Filter out rows where both province_name and district_name are NA\n  filter(province_name == province_of_interest) %&gt;%  # Keep only rows for the specified province\n  group_by(district_name) %&gt;%\n  summarise(count = n(), .groups = 'drop') %&gt;%\n  ungroup() %&gt;%\n  mutate(province_name = province_of_interest)  # Manually add province_name back\n\n# Prepare district_sf for the join by selecting needed columns\ndistrict_sf_selected &lt;- dplyr::select(district_sf, NAME_1, NAME_2, geometry)\n\n# Join with district_sf to add geometries, matching on district and province names\nfacilities_count_per_district &lt;- facilities_count_per_district %&gt;%\n  left_join(district_sf_selected, by = c(\"district_name\" = \"NAME_2\", \"province_name\" = \"NAME_1\"))\n\n# Convert the result back to an sf object\nfacilities_count_per_district &lt;- st_as_sf(facilities_count_per_district)\n\n\ntm_shape(facilities_count_per_district)+\n  tm_fill(\"count\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Healthcaren facilities in districts in 1 province\",\n            main.title.position = \"center\",\n            main.title.size = 0.9,\n            legend.height = 0.3, \n            legend.width = 0.30,\n            legend.position = c(\"left\", \"bottom\"), \n            legend.title.size = 0.8,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nPlotting categories of healthcare facilities in a selected province\n\nfacilities_count_per_category &lt;- points_facilities_2 %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove geometry if it's an sf object\n  filter(!is.na(CATEGORY)) %&gt;%  # Filter out rows with NA in category\n  filter(province_name == 'Phnom Penh') %&gt;% \n  group_by(CATEGORY) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\nggplot(facilities_count_per_category, aes(x = CATEGORY, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Facilities Count per Category In Phnom Penh\nProvince\", x = \"Category\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-a-district-divided-by-communes",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-a-district-divided-by-communes",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Plotting facilities on a district (divided by communes)",
    "text": "Plotting facilities on a district (divided by communes)\n\nprovinceNameSelected &lt;- \"Batdâmbâng\"\ndistrictNameSelected &lt;- \"Banan\"\n\n# Subset to select rows from district_sf that match both the selected province and district names\nselected_row &lt;- subset(commune_sf, NAME_1 == provinceNameSelected & NAME_2 == districtNameSelected)\n\n# Select all health facilities that match the selected province and district names\nselectedHealthFacilities &lt;- subset(points_facilities_2, province_name == provinceNameSelected & district_name == districtNameSelected)\n\n\nMapping discrete healthcare facilities on a mapChoropleth\n\n\n\ntm_shape(selected_row, scale = 5) +\n  tm_polygons(col = \"black\", border.col = \"white\") +\ntm_shape(selectedHealthFacilities) +\n  tm_dots(size = 0.1, col = \"purple\")\n\n\n\n\n\n\n\nprovince_of_interest &lt;- provinceNameSelected # Replace with actual province name\ndistrict_of_interest &lt;- districtNameSelected # Replace with actual district name\n\n# Process facilities_count_per_commune by filtering, grouping, and summarising\nfacilities_count_per_commune &lt;- points_facilities_2 %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove geometry if it's an sf object\n  filter(!is.na(province_name) & !is.na(district_name) & !is.na(commune_name)) %&gt;%  # Filter out rows where province_name, district_name, and commune_name are NA\n  filter(province_name == province_of_interest & district_name == district_of_interest) %&gt;%  # Keep only rows for the specified province and district\n  group_by(commune_name) %&gt;%\n  summarise(count = n(), .groups = 'drop') %&gt;%\n  ungroup() %&gt;%\n  mutate(province_name = province_of_interest, district_name = district_of_interest)  # Manually add province_name and district_name back\n\n# Prepare district_sf for the join by selecting needed columns\ndistrict_sf_selected &lt;- commune_sf %&gt;%\n  dplyr::select(NAME_1, NAME_2, NAME_3, geometry)\n\n# Join with district_sf to add geometries, matching on province, district, and commune names\nfacilities_count_per_commune &lt;- facilities_count_per_commune %&gt;%\n  left_join(district_sf_selected, by = c(\"province_name\" = \"NAME_1\", \"district_name\" = \"NAME_2\", \"commune_name\" = \"NAME_3\"))\n\n# Convert the result back to an sf object\nfacilities_count_per_commune &lt;- st_as_sf(facilities_count_per_commune)\n\n\ntm_shape(facilities_count_per_commune)+\n  tm_fill(\"count\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Healthcaren facilities in communes in 1 district\",\n            main.title.position = \"center\",\n            main.title.size = 0.9,\n            legend.height = 0.3, \n            legend.width = 0.30,\n            legend.position = c(\"left\", \"bottom\"), \n            legend.title.size = 0.8,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 1) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nPlotting categories of facilities in a selected district\n\nfacilities_count_per_category &lt;- points_facilities_2 %&gt;%\n  st_set_geometry(NULL) %&gt;%  # Remove geometry if it's an sf object\n  filter(!is.na(CATEGORY)) %&gt;%  # Filter out rows with NA in category\n  filter(province_name == 'Phnom Penh', district_name == 'Phnom Penh') %&gt;% \n  group_by(CATEGORY) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\nggplot(facilities_count_per_category, aes(x = CATEGORY, y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  labs(title = \"Facilities Count per Category In Phnom Penh\ndistrict\", x = \"Category\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-a-communedivided-by-villages",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#plotting-facilities-on-a-communedivided-by-villages",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "Plotting facilities on a commune(divided by villages)",
    "text": "Plotting facilities on a commune(divided by villages)\n\nprovinceNameSelected &lt;- \"Tbong Khmum\"\ndistrictNameSelected &lt;- \"Ou Reang Ov\"\ncommuneNameSelected &lt;- \"Kong Chey\"\n\n# Subset to select rows from district_sf that match both the selected province and district names\nselected_row &lt;- subset(village_sf, NAME_1 == provinceNameSelected & NAME_2 == districtNameSelected & NAME_3 == communeNameSelected)\n\n# Select all health facilities that match the selected province and district names\nselectedHealthFacilities &lt;- subset(points_facilities_2, province_name == provinceNameSelected & district_name == districtNameSelected & commune_name == communeNameSelected)\n\n\ntm_shape(selected_row, scale = 5) +\n  tm_polygons(col = \"black\", border.col = \"white\") +\ntm_shape(selectedHealthFacilities) +\n  tm_dots(size = 0.1, col = \"purple\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#ui-of-my-screens",
    "href": "Take-Home_Ex/Take-Home_Ex03/Take-Home_Ex03.html#ui-of-my-screens",
    "title": "Take-home Exercsie 3 - Distribution of healthcare facilities in Cambodia",
    "section": "UI of my screens",
    "text": "UI of my screens\nThis is the screen for exploratory data analysis. When entering the page, they will see data pertaining to the whole of Cambodia. Then, the user will be able to select what province they want explore, and then their options for district will be filtered according to the province they selected (only districts in that province will be shown). Similarly, when they select a district, only communes of that district will be shown for the commune section - and same for village with regards to the commune chosen.\nThey will be able to see two types of maps to understand the distribution of hospital facilities more - spatial points and choropleth maps. They will also be able to see the types of facilities in their chosen area. So, this is the screen users will see when they choose spatial point maps.\n\nThis is what the user will see when they choose to see choropleth maps. They will have more filters when they chose to do this. They can choose the type of grouping in data (jenkins, quartile etc) and the color theme of their liking"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS1455-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications.\nThis is the course website of the IS415 mod that I am embarking on this semester. You will find my course materials here. Have fun:)"
  }
]