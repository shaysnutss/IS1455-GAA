---
title: "Hands-On Exercise 1 : Geospatial Wrangling With R"

execute: 
  warning: false
date: "`r Sys.Date()`"
---

Hello! In this page, i will be describing how i performed data wrangling - which is basically cleaning and transforming raw data into a more structured and usable format or later analysis.

## Installing and loading R packages

In this section, I will install and load 'tidyverse' and 'sf' packages.

##### What are the sf and tidyverse packages?

Let me give you a break down.

###### [**Tidyverse Package**]{.underline}

Imagine you have a pile of dirty data that you need to handle. The Tidyverse package helps you handle your data. It actually has a bunch of packages within it to help handle data. It can do the following:

1.  readr - reading and writing data into or out of a spreadsheet

2.  tidyr - organizing and tidying up your data

3.  ggplot2 - visualizing your data

4.  dpylr - mainpulating your data, like doing some basic math to it.

###### [**SF Package**]{.underline}

SF package provides us with tools to work with data related to maps and geospatial data. It can

1.  Read and write geospatial data from and into files.
2.  Manipulate data - like cut out a specific area on a map
3.  Visualize data

Now let's load the packages into our environment.

```{r}

# Loads the p_load function on pacman which checks if packages are available, and then loads them into the R environment.
pacman::p_load(tidyverse, sf)

```

## Importing geospatial data

### Importing the geospatial data in shapefile format

Here we import the geospatial data which is in shapefile format as a a polygon feature data frame.

##### What is a shapefile and what is a polygon feature data frame?

###### [**Shapefile**]{.underline}

Shapefile format stores geographic location and attribute information of geographic features.

###### [**Polygon feature data frame**]{.underline}

Think of polygons as shapes that represent areas on a map.

Data frames store details about the polygons (think area) on tables.

So polygon feature data frames store data about areas on the map.

```{r}

#st_read is a function from the SF package which helps with the handling of data. We read the data into the variable mpsz.

mpsz <- st_read(dsn = "data/geospatial",
 layer  = "MP14_SUBZONE_WEB_PL")

```

### Importing polyline feature data in shapefile form

##### What is a polyline feature data frame?

A polyline is made up of connected points and can represent things such as roads, rivers, or hiking trails.

Feature Data Frames store information about these lines, like what is the name of the road, how long is it, what's its surface?

A polyline feature data frame stores information on lines that represent routes or rivers on a map.

Now let's import the polyline feature data

```{r}

cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")

```

### Importing GIS data in kml format

##### What is a GIS data and kml format ?

###### [**kml format**]{.underline}

It is keyhole markup language used to describe places and features on a digital map. You can define shapes like drawing a line to show a hiking trail or a polygon to show a lake. You can also attach information to places.

###### [**GIS data**]{.underline}

A map has information like shapes, paths, data and locations. GIS data is when all this information is organized in a computer friendly way. People use these data to analyse the environment, plan cities and much more.

Now let's import GIS data in kml format.

```{r}

preschool = st_read("data/geospatial/PreSchoolsLocation.kml")

```

## Checking out the contents of a simple feature data frame

### st_geometry

Shapes represent areas on a map. The data.frame in the package sf contains a column, and that column contains a list of those shapes in the specific class called 'sfc'.

Let's execute this command

```{r}

st_geometry(mpsz)
```
This commands tells you a few things:

1. The types of shapes you're dealing with. Multipolygon means its an area with multiple connected lines.

2. The bounding box/ range of coordinates that coer the same

3. Also the first 5 shapes in the column of the data frame

### glimpse

Let's execute this command

```{r}

glimpse(mpsz)

```

This command gives you a glimpse into the dataset.

it tells you the following things:

1. the number of rows
2. the number of columns
3. what columns are there
4. data type of each column
4. first few values of each column

### head()

Let's execute this command

```{r}

head(mpsz, n=5) 

```

This provides you with complete information (columns and the number of values u want).



## Plotting Data

Now, let's plot the data in our mpsz as a visualization. We use the plot() function for it.

This provides the entire visualization.

```{r}

plot(mpsz)

```

If you want to just plot the different shapes in the map, we can do this:

```{r}

plot(st_geometry(mpsz))

```

If you want to plot just based off of one column/attribute, you can do this. Each color reprsents the a row.

```{r}

plot(mpsz["PLN_AREA_N"])

```

## Working with projection

There are multiple ways you can study geography. You can study it if it were on a flat piece of paper or curved 3d way on your laptop screen.

When there are two different ways of expressing geography, the way the data is, is differnet. If you want to use two sets of geospatial data, you want to ensure the data has the same projection, i.e. represents locations on the earth's surface the same way. 
Hence, you will have to translate one of the maps to the same  projection of another.


### Working with projection

One of the common issues that can happen is that the coordinate system of a geospatial data is mising or incorrect. To check and input the correct coordinate system, we execute the following command to check the coordinate reference system. 

```{r}

st_crs(mpsz)

```

then check at the end of the print if the ESPG code corresponds correctly to the coordinate system. Here, svy21 should correspond to 3414 not 9001. So we change it!

```{r}

mpsz3414 <- st_set_crs(mpsz, 3414)

```

Now let's double check if the ESPG code is correct

```{r}

st_crs(mpsz3414)

```
### Working with projection

Sometimes we change projection of a geospatial data to one that is congrunet with the type of analysis we are making.

For example, geographic coordinate system may not be appropriate if the analysis needs to use distance or/and area measurements. 

let's do some transformation here.

```{r}

preschool3414 <- st_transform(preschool, 
                              crs = 3414)

```

##Importing and Converting An Aspatial Data

### What is aspatial data?

Let's back track. Spatial data refers to physical location, shapes and positions of the objects on the earth's surface. 

Aspatial data refers to characteristics or properties of those objects. Airbnb is asptial data, so it focuses on what kind of house is it, how many bed rooms how many bathrooms, maybe its rental per night. 

### Import spatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```
Let's explore the data.


```{r}
list(listings) 

```
###Creating a simple feature data frame from an aspatial data frame

Let's do some conversion : transform one coordinate system to another.

First code line, we convert the aspatial data from to a simple feature data frame. Then we change the coordinate system.

```{r}

listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)

```

Things to learn from the arguments above:

1. coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
2. crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other countryâ€™s epsg code by referring to epsg.io.
3. %>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.



```{r}

glimpse(listings_sf)

```

Table above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.



## Geoprocessing with sf package

Here, we will be learning about buffering and point in polygon.

###Buffering

####What is bufferring

Let's say there is a point of interest like a cycling path You want to analyse a certain amount of area around it, and the amount would be the buffer. Let's say buffer is 5, you would want to study the area in a 5 mile radius around it. 


Let's have another working scenario: 

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

Let's create a data frame with a buffer zone around the cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)

```

You created the buffer in the previous command , now you can calculate the total area of the buffer by doing so.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)

```

Now the summation of the buffer land and the exisiting cycling path- total land involved.

```{r}
sum(buffer_cycling$AREA)

```
###Point-in-polygon count

####What is Point-in-polygon count

It refers to counting the number of points in an area (polygon)

Let's say, a pre-school service group wants to find out the numbers of pre-schools in each Planning Subzone.

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.


```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))

```

```{r}
summary(mpsz3414$`PreSch Count`)

```

Zone with most preschools
```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```
Calculate density of presch

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()

mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

```


##Exploratory Data Analysis (EDA)

Let's visualize our data to get a better idea of it.

```{r}
hist(mpsz3414$`PreSch Density`)

```


```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")

```


```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")

```